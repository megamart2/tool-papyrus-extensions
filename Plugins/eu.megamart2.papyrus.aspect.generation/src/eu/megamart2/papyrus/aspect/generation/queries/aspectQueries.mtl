[comment encoding = UTF-8 /]
[module aspectQueries('http://www.eclipse.org/uml2/5.0.0/UML')]

[query public getStereotype(e : Element, sName : String) : Stereotype = e.getAppliedStereotype(sName) /]

[query public hasStereotype(e : Element, sName : String) : Boolean = not e.getAppliedStereotype(sName).oclIsUndefined()/]

[query public isAspect(e : Element) : Boolean = e.hasStereotype('aspectj::Aspect') /]

[query public getStereotypePropertyValue(stereotypedElement : Element, stereotypeName : String, propertyName : String) : OclAny = 
   let stereotype : Stereotype = stereotypedElement.getAppliedStereotype(stereotypeName) in
     if not stereotype.oclIsUndefined() then
       stereotypedElement.getValue(stereotype, propertyName)
     else 
       null
     endif/]

[query public getArgsPointCut(p : Property) : OclAny = 
	if (p.hasStereotype('aspectj::CompositePointCut')) then
		let list : OclAny = p.getStereotypePropertyValue('aspectj::CompositePointCut','composee') in
			list->flatten()->any(c | c.eGet('base_PointCut_StructuralFeature').
				oclAsType(Property).hasStereotype('aspectj::ArgsPointCut')).
					eGet('base_PointCut_StructuralFeature')
	else
		null
	endif/]

[query public checkInTypes(op : Operation) : Boolean =
  if(op.inputParameters().oclIsUndefined()->includes(false)) then true
  else false
  endif
/]

[query public checkCollection(collection : OclAny) : Boolean = 
  if(collection.oclIsUndefined()->includes(false))then true
  else false
  endif
/]

[query public checkString(sr : String) : Boolean =
not (sr.oclIsUndefined() or sr.equalsIgnoreCase(''))
/]

[query public checkOcl(ocl : OclAny) : Boolean =
not (ocl.oclIsUndefined() or ocl.oclIsInvalid())
/]

[query public getArgsPointCut(o : Operation) : OclAny = 
	if (o.hasStereotype('aspectj::Advice')) then
		let p : Property = o.getStereotypePropertyValue('aspectj::Advice','pointcut')
			->asSequence()->flatten()->first().eGet('base_PointCut_StructuralFeature').oclAsType(Property) in
			p.getArgsPointCut()
	else
		null
	endif/]

[query private checkType(type : Type) : String =
if type.oclIsInvalid() then ''
else type.name.check0()
endif/]

[query private check0(sr : String) : String = 
if sr.contains('Integer') then 'int'
else sr.check1()
endif/]

[query private check1(sr : String) : String =
if sr.contains('Real') then 'double'
else sr.check2()
endif/]

[query private check2(sr : String) : String =
if sr.contains('String') then 'String'
else sr.check3()
endif/]

[query private check3(sr : String) : String =
if sr.equalsIgnoreCase('Boolean') or sr.equalsIgnoreCase('Byte') or sr.equalsIgnoreCase('Long') or sr.equalsIgnoreCase('Char')
then sr.toLowerFirst()
else sr.check4()
endif/]

[query private check4(sr : String) : String =
if sr.contains('IntegerObject') or sr.equalsIgnoreCase('LongObject') or sr.equalsIgnoreCase('ShortObject')
then sr.replaceAll('Object','')
else sr
endif/]
