[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/uml2/5.0.0/UML')]

[import eu::megamart2::papyrus::aspect::generation::queries::aspectQueries/]

[template public generateAspect(aClass : Class) ? (aClass.isAspect())]
[comment @main/]
[file (aClass.name.concat('.aj'), false, 'UTF-8')]
  [let s : Stereotype = aClass.getStereotype('aspectj::Aspect')]
    [if (aClass.getStereotypePropertyValue('aspectj::Aspect','isPrivileged').toString().contains('true'))]
privileged aspect [aClass.name/] {
    [else]
public aspect [aClass.name/] {
    [/if]
			[for (p : Property | s.getAllAttributes())]
				[p.name/]:[aClass.getStereotypePropertyValue('aspectj::Aspect', p.name)/]
			[/for]
   [/let]
   
   [for(p : Property | aClass.getAllAttributes())]
     [if (not p.getAppliedStereotype('aspectj::ArgsPointCut').oclIsUndefined())]
   pointcut [p.name/] ():
      args([let collection : OclAny = p.getStereotypePropertyValue('aspectj::ArgsPointCut','argNames')][collection/][/let]);
[/if]
     [if (not p.getAppliedStereotype('aspectj::CallPointCut').oclIsUndefined())]
   pointcut [p.name/]():(
        [for(o : OclAny | p.getStereotypePropertyValue('aspectj::CallPointCut','operation'))]
           [let op : Operation = o.oclAsType(Operation)] 
      call([if(op.datatype.oclIsInvalid())] [op.datatype/] [else] * [/if][if(not op.eContainer().oclIsUndefined())][op.eContainer().oclAsType(Class).name/][else]*[/if].[op.name/]([for(param : Parameter | op.inputParameters())][param.type/][/for])));
           [for(parameter : Parameter | op.inputParameters())]name : [parameter.name/]type : [parameter.type/][/for]
           [/let]
        [/for]
     [/if]
   [/for]

   [for(p : Property | aClass.getAllAttributes())]

        [p.name/]
       [for (st : Stereotype | p.getAppliedStereotypes())]
          >> [st.name/]
              [for (a : Property | st.getAllAttributes())]
              >>>> [a.name/]:[p.getStereotypePropertyValue('aspectj::'.concat(st.name),a.name)/]
             [/for]
       [/for]
   [/for]
	}
[/file]
[/template] 
