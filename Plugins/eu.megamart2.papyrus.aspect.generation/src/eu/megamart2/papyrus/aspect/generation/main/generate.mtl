[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/uml2/5.0.0/UML')]

[import eu::megamart2::papyrus::aspect::generation::queries::aspectQueries/]

[template public generateAspect(aClass : Class) ? (aClass.isAspect())]
[comment @main/]
[file (aClass.name.concat('.aj'), false, 'UTF-8')]
  [let s : Stereotype = aClass.getStereotype('aspectj::Aspect')]
    [if (aClass.getStereotypePropertyValue('aspectj::Aspect','isPrivileged').toString().contains('true'))]
privileged aspect [aClass.name/] {
    [else]
public aspect [aClass.name/] {
    [/if]
  [/let]
   
  [for(p : Property | aClass.getAllAttributes())]
	[if (not p.getAppliedStereotype('aspectj::CompositePointCut').oclIsUndefined())]
		pointcut [p.name/]()
		[let list : OclAny = p.getStereotypePropertyValue('aspectj::CompositePointCut','composee')]
			[let last : OclAny = list->asSequence()->flatten()->last()]
				[for (composee : OclAny | list)]
					[let compProp : Property = composee.eGet('base_PointCut_StructuralFeature')]
						[if (not compProp.getAppliedStereotype('aspectj::CallPointCut').oclIsUndefined())]
							call (
								[let signature : String = compProp.getStereotypePropertyValue('aspectj::CallPointCut', 'signature')]
									[if (not signature.oclIsUndefined())]
										[signature/] 
									[/if]
								[/let]
								)
     					[/if]
						[if (not compProp.getAppliedStereotype('aspectj::ArgsPointCut').oclIsUndefined())]
     						args(
								[let collection : OclAny = compProp.getStereotypePropertyValue('aspectj::ArgsPointCut','argNames')]
									[let last : OclAny = collection->asSequence()->flatten()->last()]
										[for (argName : String | collection)]
											[argName/]
											[if (last <> argName)]
												,
											[/if]
										[/for]
									[/let]
								[/let]);
     					[/if]
						[if (last <> composee)]
							[if (p.getStereotypePropertyValue('aspectj::CompositePointCut','type').oclAsType(EnumerationLiteral).name.equalsIgnoreCase('and'))]
								&&
							[/if]
						[/if]
					[/let]
				[/for]
			[/let]
		[/let]
     [/if]

     [if (not p.getAppliedStereotype('aspectj::ArgsPointCut').oclIsUndefined())]
		[if (p.getStereotypePropertyValue('aspectj::ArgsPointCut','composite').oclIsUndefined())]
     		pointcut [p.name/] ():
     		args([let collection : OclAny = p.getStereotypePropertyValue('aspectj::ArgsPointCut','argNames')][collection/][/let]);
     	[/if]
     [/if]

     [if (not p.getAppliedStereotype('aspectj::CallPointCut').oclIsUndefined())]
		[if (p.getStereotypePropertyValue('aspectj::CallPointCut','composite').toString().equalsIgnoreCase(''))]
     		pointcut [p.name/](): call (
				[let signature : String = p.getStereotypePropertyValue('aspectj::CallPointCut', 'signature')]
					[if (not signature.oclIsUndefined())]
						[signature/] 
					[/if]
				[/let]
			);
		[/if]
     [/if]
   [/for]

  [for(o: Operation | aClass.getAllOperations())]
     [if (not o.getAppliedStereotype('aspectj::Advice').oclIsUndefined())]
		[let adviceExecution : EnumerationLiteral = o.getStereotypePropertyValue('aspectj::Advice', 'adviceExecution')]
     		void [adviceExecution.name.toLower()/] ():
		[/let]
		[let pointcut : OclAny = o.getStereotypePropertyValue('aspectj::Advice', 'pointcut')]
 			[pointcut.eGet('base_PointCut_StructuralFeature').oclAsType(Property).name/](){
				[o.method.eGet('body')/]
			}
		[/let]
     [/if]
  [/for]
	}
[/file]
[/template] 
