[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import eu::megamart2::papyrus::aspect::generation::queries::aspectQueries/]

[template public generateAspect(aClass : Class) ? (aClass.isAspect())]
[comment @main/]
[comment Generation of aspect for each found class annotated as Aspect /]
[file (aClass.name.concat('.aj'), false, 'UTF-8')]
  [let s : Stereotype = aClass.getStereotype('aspectj::Aspect')]
    [if (aClass.getStereotypePropertyValue('aspectj::Aspect','isPrivileged').toString().contains('true'))]
privileged aspect [aClass.name/] {
    [else]
public aspect [aClass.name/] {
    [/if]
  [/let]
   
[comment Generation of poincuts for class properties annotated with one of stereotypes extending PointCut/]
[for(p : Property | aClass.getAllAttributes())]
	[comment Different cases for different types of pointcuts. Currently supported: CompositePointCut, CallPointCut, ArgsPointCut. To be completed /]
	[comment CompositePointCut/]
	[if (p.hasStereotype('aspectj::CompositePointCut'))]
	pointcut [p.name/]([let argsPointCut : Property = p.getArgsPointCut()][if (not argsPointCut.oclIsUndefined())][argsPointCut.fullSignature()/][/if][/let]):
		[comment For each pointcut aggregated by this composition/]
		[let list : OclAny = p.getStereotypePropertyValue('aspectj::CompositePointCut','composee')]
			[let last : OclAny = list->asSequence()->flatten()->last()]
				[for (composee : OclAny | list)]
					[comment Once obtained the stereotype slot composee (a Poincut stereotyped entity), we get the referenced entity by getting the base_PointCut_StructuralFeature value /]
					[let compProp : Property = composee.eGet('base_PointCut_StructuralFeature')]
						[comment We proceed for each composee pointcut depending on its type. Currently supported: CallPointCut, ArgsPointCut. To be completed /]
						[if (compProp.hasStereotype('aspectj::CallPointCut'))]
		[compProp.callSignature()/]
     					[/if]
						[if (compProp.hasStereotype('aspectj::ArgsPointCut'))]
     	args([compProp.noTypeSignature()/]);
     					[/if]
						[if (last <> composee)]
							[if (p.getStereotypePropertyValue('aspectj::CompositePointCut','type').oclAsType(EnumerationLiteral).name.equalsIgnoreCase('and'))]
		&&
							[/if]
                          [if(p.getStereotypePropertyValue('aspectj::CompositePointCut','type').oclAsType(EnumerationLiteral).name.equalsIgnoreCase('or'))]
        ||                 
                        [/if]
						[/if]
					[/let]
				[/for]
			[/let]
		[/let]
     [/if]
     [comment end of the composite /]
[comment **********************************************************************************************************************/]
[comment   ----- SIMPLE POINTCUTS -----   This templates are only applied if found pointcut is not part of a composition (managed above)/]
[comment              ** ARGS **                     /]
     [if (p.hasStereotype('aspectj::ArgsPointCut'))]

		[if (p.getStereotypePropertyValue('aspectj::ArgsPointCut','composite').oclIsUndefined() or p.getStereotypePropertyValue('aspectj::ArgsPointCut','composite').toString().equalsIgnoreCase(''))]
[p.argsPointCutFullSignature()/]
     	[/if]
     [/if]
[comment --------------------------------------------------------------------------------------------------------------------/]
[comment             ** TARGET **                     /]
     [if(p.hasStereotype('aspectj::TargetPointCut'))]

         [if(p.getStereotypePropertyValue('aspectj::TargetpointCut','composite').oclIsUndefined())]
              pointcut [p.name/] ([p.generalFullSignature('aspectj::TargetPointCut')/]):
                 target([p.generalNoTypeSignature('aspectj::TargetPointCut')/]);
        [/if]
     [/if]
[comment ---------------------------------------------------------------------------------------------------------------------/]
[comment             ** THIS **                      /]
     [if(p.hasStereotype('aspectj::ThisPointCut'))]

         [if(p.getStereotypePropertyValue('aspectj::ThisPointCut','composite').oclIsUndefined())]
             pointcut [p.name/] ([p.generalFullSignature('aspectj::ThisPointCut')/]):
                this([p.generalNoTypeSignature('aspectj::ThispointCut')/]);
       [/if]
     [/if]
[comment ---------------------------------------------------------------------------------------------------------------------/]
[comment             ** CALL **                        /]
     [if (p.hasStereotype('aspectj::CallPointCut'))]

		[if (p.getStereotypePropertyValue('aspectj::CallPointCut','composite').toString().equalsIgnoreCase(''))]
     		pointcut [p.name/](): [p.callSignature()/];
		[/if]
     [/if]
[comment ---------------------------------------------------------------------------------------------------------------------/]
[comment           ** WITHINCODE **                       /]
     [if(p.hasStereotype('aspectj::WithinCodePointCut'))]

   pointcut [p.name/](): [p.withinCodeSignature()/];
     [/if]
[comment ---------------------------------------------------------------------------------------------------------------------/]
[comment           ** EXECUTION **                        /]
     [if(p.hasStereotype('aspectj::ExecutionPointCut'))]

   pointcut [p.name/](): [p.executionSignature()/];
     [/if]
[comment ----------------------------------------------------------------------------------------------------------------------/]
[comment            ** INITIALIZATION **                      /]
     [if(p.hasStereotype('aspectj::InitializationPointCut'))]

   pointcut [p.name/](): [p.initializationSignature()/];
     [/if]
[comment ----------------------------------------------------------------------------------------------------------------------/]
[comment            ** PRE-INITIALIZATION **                     /]
     [if(p.hasStereotype('aspectj::PreInitializationPointCut'))]

    pointcut [p.name/](): [p.preInitializationSignature()/];
     [/if]
[comment ----------------------------------------------------------------------------------------------------------------------/]
[comment            ** SET **                         /]
       [if(p.hasStereotype('aspectj::SetPointCut'))]

          pointcut [p.name/](): (
            [p.setPointCutSignature()/]);
       [/if]
[comment ----------------------------------------------------------------------------------------------------------------------/]
[comment            ** GET **                        /]
       [if(p.hasStereotype('aspectj::GetPointCut'))]

          pointcut [p.name/](): (
           [p.getPointCutSignature()/]);
       [/if]
[comment ----------------------------------------------------------------------------------------------------------------------/]
[comment             ** WITHIN **                         /]
        [if(p.hasStereotype('aspectj::WithinPointCut'))]
      
           pointcut [p.name/](): (
              [p.getWithinPointSignature()/]);
        [/if]
[comment ----------------------------------------------------------------------------------------------------------------------/]
[comment             ** TARGET **                          /]
          [if(p.hasStereotype('aspectj::TargetPointCut'))]

             pointcut [p.name/]([p.generalFullSignature('aspectj::TargetPointCut')/]): (
              [p.generalNoTypeSignature('aspectj::TargetPointCut')/]);
          [/if]
[comment ----------------------------------------------------------------------------------------------------------------------/]
[comment             ** CFLOW **                          /]
          [if(p.hasStereotype('aspectj::CFlowPointCut'))]

          [p.getCFlowPointCutSignature()/]
          [/if]
[comment ----------------------------------------------------------------------------------------------------------------------/]
[comment           ** STATIC CROSS-CUTTING FEATURE **                  /]  
          [if(p.hasStereotype('aspectj::StaticCrossCuttingFeature'))]

            [for(t : OclAny | p.getStereotypePropertyValue('aspectj::StaticCrossCuttingFeature','onType') ->flatten()->asSequence())]
             [p.visibility.toString()/] [p.type.name/] [t.oclAsType(NamedElement).name/].[p.name/];
            [/for]
          [/if]
   [/for]
[comment ***********************************************************************************************************************/]
[comment             ----- GENERATION OF ADVICES ----- /]
  [for(o: Operation | aClass.getAllOperations())]
    [if (o.hasStereotype('aspectj::Advice'))]
		[let adviceExecution : EnumerationLiteral = o.getStereotypePropertyValue('aspectj::Advice', 'adviceExecution')]
	void [adviceExecution.name.toLower()/] ([let argsPointCut : Property = o.getArgsPointCut()][if (not argsPointCut.oclIsUndefined())][argsPointCut.fullSignature()/][/if][/let]):
			[let pointcut : OclAny = o.getStereotypePropertyValue('aspectj::Advice', 'pointcut')]
	 	[pointcut.eGet('base_PointCut_StructuralFeature').oclAsType(Property).name/]([let argsPointCut : Property = o.getArgsPointCut()][if (not argsPointCut.oclIsUndefined())][argsPointCut.noTypeSignature()/][/if][/let]){
					[o.method.eGet('body')/]
	}
			[/let]
		[/let]
    [/if]
  [/for]
}
[/file]
[/template] 

[template public argsPointCutFullSignature(p : Property) post(trim())]
[let names : Sequence(OclAny) = p.getStereotypePropertyValue('aspectj::ArgsPointCut','argNames')->asSequence()->flatten()]
  [let types : Sequence(OclAny) = p.getStereotypePropertyValue('aspectj::TypePointCut','types')->asSequence()->flatten()]
    [let indexes : Sequence(Integer) = names->collect(sr | names->indexOf(sr))]
      [let last : OclAny = names->last()]
pointcut [p.name/]([for(index : Integer | indexes)][types->at(index).toString()/] [names->at(index)/][if(names->at(index) <> last)], [/if][/for]): args([for(index : Integer | indexes)][names->at(index)/][if(names->at(index) <> last)], [/if][/for]);
       [/let]
     [/let]
  [/let]
[/let]
[/template]

[template public callSignature(p : Property) post(trim())]
[let signature : String = p.getStereotypePropertyValue('aspectj::CallPointCut', 'signature').toString()]
[if ((not signature.oclIsUndefined()) and (not signature.equalsIgnoreCase('')))]call([signature/])[else][let operations : Sequence(Operation) = p.getStereotypePropertyValue('aspectj::CallPointCut','operation')->flatten()->asSequence()]
    [let indexes : Sequence(Integer) = operations->collect(op | operations->indexOf(op))]
        [let last : Operation = operations->last()]
            [for(index : Integer | indexes)]
              [let operation : Operation = operations->at(index)]
                call([if(operation.checkOcl())][operation.visibility.toString()/] [operation.returnResult().type.name/] [/if][if(operation.returnResult().oclIsUndefined()->includes(false))][operation.returnResult().name/] [/if][if(operation.name.checkString())] [operation.name/][/if]
[if(operation.inputParameters().oclIsUndefined()->includes(false))]([let indexes : Sequence(Integer) = operation.inputParameters()->collect(pa | operation.inputParameters()->indexOf(pa))][let last : Parameter = operation.inputParameters()->last()][for(index : Integer | indexes)][operation.inputParameters()->at(index).type.name/][if(operation.inputParameters()->at(index) <> last)],[/if][/for][/let][/let][else](..[/if]))	
              [/let]
            [/for]
        [/let]
    [/let]
[/let]
  [/if]
 [/let]
[/template]

[template public executionSignature(p : Property) post(trim())]
[let signature : String = p.getStereotypePropertyValue('aspectj::ExecutionPointCut', 'signature').toString()]
[if ((not signature.oclIsUndefined()) and (not signature.equalsIgnoreCase('')))]execution([signature/])[else][let operations : Sequence(Operation) = p.getStereotypePropertyValue('aspectj::ExecutionPointCut','operation')->flatten()->asSequence()]
    [let indexes : Sequence(Integer) = operations->collect(op | operations->indexOf(op))]
        [let last : Operation = operations->last()]
            [for(index : Integer | indexes)]
              [let operation : Operation = operations->at(index)]
                execution([if(operation.checkOcl())][operation.visibility.toString()/] [operation.returnResult().type.name/] [/if][if(operation.returnResult().oclIsUndefined()->includes(false))][operation.returnResult().name/] [/if][if(operation.name.checkString())] [operation.name/][/if]
[if(operation.inputParameters().oclIsUndefined()->includes(false))]([let indexes : Sequence(Integer) = operation.inputParameters()->collect(pa | operation.inputParameters()->indexOf(pa))][let last : Parameter = operation.inputParameters()->last()][for(index : Integer | indexes)][operation.inputParameters()->at(index).type.name/][if(operation.inputParameters()->at(index) <> last)],[/if][/for][/let][/let][else](..[/if]))	
              [/let]
            [/for]
        [/let]
    [/let]
[/let]
  [/if]
 [/let]
[/template]

[template public withinCodeSignature(p : Property) post(trim())]
[let signature : String = p.getStereotypePropertyValue('aspectj::WithinCodePointCut', 'signature').toString()]
[if ((not signature.oclIsUndefined()) and (not signature.equalsIgnoreCase('')))]withiCode([signature/])[else][let operations : Sequence(Operation) = p.getStereotypePropertyValue('aspectj::WithinCodePointCut','operation')->flatten()->asSequence()]
    [let indexes : Sequence(Integer) = operations->collect(op | operations->indexOf(op))]
        [let last : Operation = operations->last()]
            [for(index : Integer | indexes)]
              [let operation : Operation = operations->at(index)]
                withinCode([if(operation.checkOcl())][operation.visibility.toString()/] [operation.returnResult().type.name/] [/if][if(operation.returnResult().oclIsUndefined()->includes(false))][operation.returnResult().name/] [/if][if(operation.name.checkString())] [operation.name/][/if]
[if(operation.inputParameters().oclIsUndefined()->includes(false))]([let indexes : Sequence(Integer) = operation.inputParameters()->collect(pa | operation.inputParameters()->indexOf(pa))][let last : Parameter = operation.inputParameters()->last()][for(index : Integer | indexes)][operation.inputParameters()->at(index).type.name/][if(operation.inputParameters()->at(index) <> last)],[/if][/for][/let][/let][else](..[/if]))	
              [/let]
            [/for]
        [/let]
    [/let]
[/let]
  [/if]
 [/let]
[/template]

[template public initializationSignature(p : Property) post(trim())]
[let signature : String = p.getStereotypePropertyValue('aspectj::InitializationPointCut', 'signature').toString()]
[if ((not signature.oclIsUndefined()) and (not signature.equalsIgnoreCase('')))]initialization([signature/])[else][let operations : Sequence(Operation) = p.getStereotypePropertyValue('aspectj::InitializationPointCut','operation')->flatten()->asSequence()]
 [let indexes : Sequence(Integer) = operations->collect(op | operations->indexOf(op))]
      [let last : Operation = operations->last()]
            [for(index : Integer | indexes)]
              [let operation : Operation = operations->at(index)]
                initialization([if(operation.checkOcl())][operation.visibility.toString()/] [/if][operation.class.name/].new[if(operation.inputParameters().oclIsUndefined()->includes(false))]([let indexes : Sequence(Integer) = operation.inputParameters()->collect(pa | operation.inputParameters()->indexOf(pa))][let last : Parameter = operation.inputParameters()->last()][for(index : Integer | indexes)][operation.inputParameters()->at(index).type.name/][if(operation.inputParameters()->at(index) <> last)],[/if][/for][/let][/let][else](..[/if]))	
              [/let]
            [/for]
        [/let]
    [/let]
[/let]
  [/if]
 [/let]
[/template]

[template public preInitializationSignature(p : Property) post(trim())]
[let signature : String = p.getStereotypePropertyValue('aspectj::PreInitializationPointCut', 'signature').toString()]
[if ((not signature.oclIsUndefined()) and (not signature.equalsIgnoreCase('')))]preinitialization([signature/])[else][let operations : Sequence(Operation) = p.getStereotypePropertyValue('aspectj::PreInitializationPointCut','operation')->flatten()->asSequence()]
 [let indexes : Sequence(Integer) = operations->collect(op | operations->indexOf(op))]
      [let last : Operation = operations->last()]
            [for(index : Integer | indexes)]
              [let operation : Operation = operations->at(index)]
                preinitialization([if(operation.checkOcl())][operation.visibility.toString()/] [/if][operation.class.name/].new[if(operation.inputParameters().oclIsUndefined()->includes(false))]([let indexes : Sequence(Integer) = operation.inputParameters()->collect(pa | operation.inputParameters()->indexOf(pa))][let last : Parameter = operation.inputParameters()->last()][for(index : Integer | indexes)][operation.inputParameters()->at(index).type.name/][if(operation.inputParameters()->at(index) <> last)],[/if][/for][/let][/let][else](..[/if]))	
              [/let]
            [/for]
        [/let]
    [/let]
[/let]
  [/if]
 [/let]
[/template]



[comment  This template generates the complete fullSignature associated to a call ArgsPoinCut, which signature: parameter Type, .../]
[template public fullSignature(p : Property) post(trim())]
	[let argNames : Sequence(String) = p.getStereotypePropertyValue('aspectj::ArgsPointCut', 'argNames')->flatten()->asSequence()]
		[let types : Sequence(NamedElement) = p.getStereotypePropertyValue('aspectj::ArgsPointCut', 'type')->flatten()->asSequence()]
    [let indexes : Sequence(Integer) = argNames->collect(arg | argNames->indexOf(arg))]
	    [let last : OclAny = argNames->last()]
		    [for (index : Integer | indexes)][types->at(index).oclAsType(NamedElement).name/] [argNames->at(index)/][if (last <> argNames->at(index))],[/if][/for]
        [/let]
    [/let]
		[/let]
	[/let]
[/template]

[template public generalFullSignature(p : Property,type : String) post(trim())]
	[let argNames : Sequence(String) = p.getStereotypePropertyValue(type, 'argNames')->flatten()->asSequence()]
		[let types : Sequence(NamedElement) = p.getStereotypePropertyValue(type, 'type')->flatten()->asSequence()]
    [let indexes : Sequence(Integer) = argNames->collect(arg | argNames->indexOf(arg))]
	    [let last : OclAny = argNames->last()]
		    [for (index : Integer | indexes)][types->at(index).oclAsType(NamedElement).name/] [argNames->at(index)/][if (last <> argNames->at(index))],[/if][/for]
        [/let]
    [/let]
		[/let]
	[/let]
[/template]

[comment This template generates a parameter name signature for ArgsPointCut: parameter1, parameter2, ... /]
[template public noTypeSignature(p : Property) post(trim())]
	[let collection : OclAny = p.getStereotypePropertyValue('aspectj::ArgsPointCut','argNames')]
		[let last : OclAny = collection->asSequence()->flatten()->last()]
			[for (argName : String | collection)][argName/][if (last <> argName)],[/if][/for]
		[/let]
	[/let]
[/template]

[template public generalNoTypeSignature(p : Property,type : String) post(trim())]
  	[let collection : OclAny = p.getStereotypePropertyValue(type,'argNames')]
		[let last : OclAny = collection->asSequence()->flatten()->last()]
			[for (argName : String | collection)][argName/][if (last <> argName)],[/if][/for]
		[/let]
	[/let]
[/template]

[comment This template generates the set poincut signature/]
[template public setPointCutSignature(p : Property) post(trim())]
    [let collection : OclAny = p.getStereotypePropertyValue('aspectj::SetPointCut','field')]
       [let last : OclAny = collection->asSequence()->flatten()->last()]
             [for (field : Property | collection)]set([field.visibility.toString().toUpperFirst()/] [field.type.name/] [field.eContainer().oclAsType(NamedElement).name/].[field.name/])[if(last <> field)] || [/if][/for]
        [/let]
    [/let]
[/template]

[comment This template generates the get poincut signature/]
[template public getPointCutSignature(p : Property) post(trim())]
    [let collection : OclAny = p.getStereotypePropertyValue('aspectj::PropertyPointCut','field')]
        [let last : OclAny = collection->asSequence()->flatten()->last()]
             [for (field : Property | collection)]get([field.visibility.toString().toUpperFirst()/] [field.type.name/] [field.eContainer().eClass().name/].[field.name/])[if(last <> field)] || [/if][/for]
        [/let]
    [/let]
[/template]

[comment WithinPointCut/]
[template public getWithinPointSignature(p : Property) post(trim())]
    [let collection : OclAny = p.getStereotypePropertyValue('aspectj::WithinPointCut','type')]
       [let last : OclAny = collection ->asSequence()->flatten()->last()]
           [for(typ : Type | collection)]within([typ.name/])[if(last <> typ)] || [/if][/for]
       [/let]
    [/let]
[/template]

[template public getCFlowPointCutSignature(p : Property) post(trim())]
    pointcut [p.name/]() : cflow([p.getStereotypePropertyValue('aspectj::CFlowPointCut','selectedPointCut').toString()/]);
[/template]
